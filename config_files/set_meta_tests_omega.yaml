---
input_count: 3
meta_var_type: "omega::Relation"
variant_count: 20
meta_check:
    - "assert(Must_Be_Subset(%m,%m0));"
    - "assert(Must_Be_Subset(%m0,%m));"

generators:
    universe:
        identifier: 'u'
        relations:
            - "Union(%1,Complement(%1))" # Complementarity
            - "Complement(%e)" # logical inverse
            - "Union(%1,%u)" # dominance

    empty:
        identifier: 'e'
        relations:
            - "Intersection(%1,Complement(%1))" # Complementarity
            - "Difference(%1,%1)"
            - "Difference(%1,%u)"
            - "Intersection(%1,%e)" # dominance
            - "Complement(%u)" # logical inverse

    #invertible_functions:
        #- [ "%1.Complement()" ,"%1.Complement()" ]

relations:
    identity:
        - "%m=Union(%1,%1)" # idempotence
        - "%m=Union(%1,%e)" # identity
        - "%m=Intersection(%1,%1)" # idempotence
        - "%m=Intersection(%1,%u)" # identity
        - "%m=Difference(%1,%e)"
        - "%m=Difference(%u,Complement(%1))"
        - "%m=Intersection(%1,Union(%1,%2))" # absorption
        - "%m=Union(%1,Intersection(%1,%2))" # absorption
        - "%m=Complement(Complement(%1))" # involution

    Complement:
        - "%m=Complement(%1)"
        - "%m=Difference(%u,%1)"

    Difference:
        - "%m=Difference(%1,%2)"
        - "%m=Intersection(%1,Complement(%2))"

    union:
        - "%m=Union(%1,%2)"
        - "%m=Union(%2,%1)" # commutativity
        - "%m=Complement(Intersection(Complement(%1),Complement(%2)))" # DeMorgan

    Intersection:
        - "%m=Intersection(%1,%2)"
        - "%m=Intersection(%2,%1)" # commutativity
        - "%m=Complement(Union(Complement(%1),Complement(%2)))" # DeMorgan

    associativity_union:
        - "%m=Union(Union(%1,%2),%3)"
        - "%m=Union(%1,Union(%2,%3))"

    associativity_Intersection:
        - "%m=Intersection(Intersection(%1,%2),%3)"
        - "%m=Intersection(%1,Intersection(%2,%3))"

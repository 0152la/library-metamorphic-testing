---
includes:
    - "omega.h"
    - "testing/omega-gen-helpers.h"

pre_setup:
    - "srand(42);"

inputs:
    - name: 'constraints'
      type: 'unsigned int'
      range: '[2,4]'
    - name: 'depth_max'
      type: 'unsigned int'
      range: '[2,4]'

types:
    - name: 'omega::Relation'
    #- name: 'omega::Variable_ID'
    #- name: 'omega::GEQ_Handle'
    #- name: 'omega::EQ_Handle'
    #- name: 'omega::Stride_Handle'
    #- name: 'omega::F_Or*'
    #- name: 'omega::F_And*'
    #- name: 'omega::F_Exists*'

funcs:
    #- name: 'update_coef'
      #member_type: 'omega::GEQ_Handle'
      #return_type: ''
      #param_types: ['omega::Variable_ID', 'unsigned int']
      #conditions: []
    #- name: 'update_const'
      #member_type: 'omega::GEQ_Handle'
      #return_type: ''
      #param_types: ['unsigned int']
      #conditions: []
    #- name: 'add_and'
      #member_type: 'omega::Relation'
      #return_type: 'omega::F_And*'
      #param_types: []
      #conditions: []
    #- name: 'add_or'
      #member_type: 'omega::Relation'
      #return_type: 'omega::F_Or*'
      #param_types: []
      #conditions: []
    #- name: 'add_exists'
      #member_type: 'omega::Relation'
      #return_type: 'omega::F_Exists*'
      #param_types: []
      #conditions: []
    #- name: 'add_GEQ'
      #member_type: 'omega::F_And*'
      #return_type: 'omega::GEQ_Handle'
      #param_types: []
      #conditions: []
    #- name: 'set_var'
      #member_type: 'omega::Relation'
      #return_type: 'omega::Variable_ID'
      #param_types: ['<range=[0,<input=var_count>)>']
      #conditions: []
    #- name: 'makeRelation'
      #member_type: ''
      #return_type: 'omega::Relation'
      #param_types: ['<seed>', '<input=var_count>']
    # Special funcs
    - name: 'print'
      member_type: 'omega::Relation'
      return_type: ''
      param_types: []
      conditions: []
      special: true
    - name: 'Union'
      member_type: ''
      return_type: 'omega::Relation'
      param_types: ['omega::Relation', 'omega::Relation']
    - name: 'Difference'
      member_type: ''
      return_type: 'omega::Relation'
      param_types: ['omega::Relation', 'omega::Relation']
    - name: 'Intersection'
      member_type: ''
      return_type: 'omega::Relation'
      param_types: ['omega::Relation', 'omega::Relation']
    - name: 'ConvexHull'
      member_type: ''
      return_type: 'omega::Relation'
      param_types: ['omega::Relation']
      special: true
    #- name: 'Sample_Solution'
      #member_type: ''
      #return_type: 'omega::Relation'
      #param_types: ['omega::Relation']
    #- name: 'Project_Sym'
      #member_type: ''
      #return_type: 'omega::Relation'
      #param_types: ['omega::Relation']
    #- name: 'Range'
      #member_type: ''
      #return_type: 'omega::Relation'
      #param_types: ['omega::Relation']
    #- name: 'Domain'
      #member_type: ''
      #return_type: 'omega::Relation'
      #param_types: ['omega::Relation']
    - name: 'Complement'
      member_type: ''
      return_type: 'omega::Relation'
      param_types: ['omega::Relation']
    #- name: 'Inverse'
      #member_type: ''
      #return_type: 'omega::Relation'
      #param_types: ['omega::Relation']
    - name: 'copy'
      member_type: ''
      return_type: 'omega::Relation'
      param_types: ['omega::Relation']
      special: true
    - name: 'Must_Be_Subset'
      member_type: ''
      return_type: 'bool'
      param_types: ['omega::Relation', 'omega::Relation']
      special: true
    - name: 'assert'
      member_type: ''
      return_type: ''
      param_types: ['bool']
      condition: []
      special: true

constructors:
    - name: 'makeTupleRelation'
      return_type: 'omega::Relation'
      param_types: ['<range=(0,10]>', '<range=(0,10]>']

set_gen:
    - type: 'func'
      func: 'makeTupleRelation'
      return: '<output_var>'
    - type: 'for'
      counter: '[0,<input=constraints>]'
      func: 'Union'
      return: '<output_var>'
      func_params:
            - '<output_var>'
            - '<new=omega::Relation>'
    - type: 'func'
      func: 'ConvexHull'
      return: '<output_var>'
      func_params:
            - '<output_var>'

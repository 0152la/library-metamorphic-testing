---
includes:
    - "isl-noexceptions.h"
    - "testing/isl-meta-point-stats.h"
    - "testing/isl-point-gen-helpers.h"

pre_setup:
    - "isl_ctx *ctx_ptr = isl_ctx_alloc();"

inputs:
    - name: 'dims'
      descriptor: '<unsigned int=range=(3,6]>'
    - name: 'constraints'
      descriptor: '<unsigned int=range=[10,20]>'
    - name: 'depth_max'
      descriptor: '<unsigned int=range=[15,25]>'

types:
    - name: 'isl::val'
    - name: 'isl::pw_aff'
    - name: 'isl::set'
    - name: 'isl::point'

singleton_types:
    - name: 'isl::space'
      singleton: true
    - name: 'isl::local_space'
      singleton: true
    - name: 'isl::ctx'
      singleton: true

funcs:
    - name: 'two_exp'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: []
      conditions: ['<member>.is_int()']
    - name: 'abs'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: []
      conditions: []
    - name: 'ceil'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: []
      conditions: []
    - name: 'floor'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: []
      conditions: []
    - name: 'inv'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: []
      conditions: ['false']
    - name: 'neg'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: []
      conditions: []
    - name: 'trunc'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: []
      conditions: []
    - name: 'add'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: ['isl::val']
      conditions: []
    - name: 'div'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: ['isl::val']
      conditions: ['!<param=1>.is_zero()']
    - name: 'max'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: ['isl::val']
      conditions: []
    - name: 'min'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: ['isl::val']
      conditions: []
    - name: 'mul'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: ['isl::val']
      conditions: []
    - name: 'sub'
      enclosing_class: 'isl::val'
      return_type: 'isl::val'
      param_types: ['isl::val']
      conditions: []
    - name: 'mod'
      enclosing_class: 'isl::pw_aff'
      return_type: 'isl::pw_aff'
      param_types: ['isl::val']
      conditions: ['false']
    - name: 'scale'
      enclosing_class: 'isl::pw_aff'
      return_type: 'isl::pw_aff'
      param_types: ['isl::val']
      conditions: ['false']
    - name: 'add'
      enclosing_class: 'isl::pw_aff'
      return_type: 'isl::pw_aff'
      param_types: ['isl::pw_aff']
      conditions: []
    - name: 'sub'
      enclosing_class: 'isl::pw_aff'
      return_type: 'isl::pw_aff'
      param_types: ['isl::pw_aff']
      conditions: []
    - name: 'max'
      enclosing_class: 'isl::pw_aff'
      return_type: 'isl::pw_aff'
      param_types: ['isl::pw_aff']
      conditions: []
    - name: 'min'
      enclosing_class: 'isl::pw_aff'
      return_type: 'isl::pw_aff'
      param_types: ['isl::pw_aff']
      conditions: []
    - name: 'dump'
      enclosing_class: 'isl::set'
      return_type: ''
      param_types: []
      conditions: []
    - name: 'set_coordinate_val'
      enclosing_class: 'isl::point'
      return_type: 'isl::point'
      param_types: ['<nqstring=val=isl::dim::set>', '<unsigned int=range=[0,<var=input=dims>)>', 'isl::val']
      condition: []
    #- name: 'set_coordinate_val'
      #enclosing_class: 'isl::point'
      #return_type: 'isl::point'
      #param_types: ['<string=isl::dim::param>', '<range=[0,<input=params>]>', 'isl::val']
      #condition: []
    # Start special funcs
    - name: 'universe'
      enclosing_class: 'isl::set'
      return_type: 'isl::set'
      param_types: ['isl::space']
      conditions: []
      special: true
      static: true
    - name: 'empty'
      enclosing_class: 'isl::set'
      return_type: 'isl::set'
      param_types: ['isl::space']
      conditions: []
      special: true
      static: true
    - name: 'var_on_domain'
      enclosing_class: 'isl::pw_aff'
      return_type: 'isl::pw_aff'
      param_types: ['isl::local_space', 'string', 'unsigned int']
      conditions: []
      special: true
      static: true
    - name: 'printStats'
      enclosing_class: ''
      return_type: ''
      param_types: ['isl::set']
      conditions: []
      special: true
    #- name: 'get_point_with_coordinates'
      #enclosing_class: ''
      #return_type: 'isl::point'
      #param_types: ['isl::space', '<rand>']
      #conditions: []
# Funcs for metamorphic relations
    - name: 'complement'
      enclosing_class: 'isl::set'
      return_type: 'isl::set'
      param_types: []
      conditions: []
      special: true
    - name: 'unite'
      enclosing_class: 'isl::set'
      return_type: 'isl::set'
      param_types: ['isl::set']
      conditions: []
      special: true
    - name: 'subtract'
      enclosing_class: 'isl::set'
      return_type: 'isl::set'
      param_types: ['isl::set']
      conditions: []
      special: true
    - name: 'intersect'
      enclosing_class: 'isl::set'
      return_type: 'isl::set'
      param_types: ['isl::set']
      conditions: []
      special: true
    - name: 'detect_equalities'
      enclosing_class: 'isl::set'
      return_type: ''
      param_types: []
      conditions: []
      special: true
    - name: 'coalesce'
      enclosing_class: 'isl::set'
      return_type: 'isl::set'
      param_types: []
      conditions: []
      special: true
    - name: 'convex_hull'
      enclosing_class: 'isl::set'
      return_type: 'isl::set'
      param_types: []
      conditions: []
      special: true
    - name: 'is_equal'
      enclosing_class: 'isl::set'
      return_type: 'bool'
      param_types: ['isl::set']
      condition: []
      special: true
    - name: 'assert'
      enclosing_class: ''
      return_type: ''
      param_types: ['bool']
      condition: []
      special: true

constructors:
    - return_type: 'isl::space'
      param_types: ['isl::ctx', '<unsigned int=val=0>', '<var=input=dims>']
    - name: 'get_point_with_coordinates'
      return_type: 'isl::point'
      param_types: ['isl::space', 'isl::val', 'isl::val', 'isl::val', 'isl::val',
        'isl::val', 'isl::val', 'isl::val', 'isl::val', 'isl::val', 'isl::val']
    - return_type: 'isl::local_space'
      param_types: ['isl::space']
    - return_type: 'isl::val'
      param_types: ['isl::ctx', 'unsigned int']
    - return_type: 'isl::ctx'
      param_types: ['<nqstring=val=ctx_ptr>']
    #- name: 'isl::point'
      #param_types: ['isl::space']
    - return_type: 'isl::set'
      param_types: ['isl::point']

set_gen:
    - type: 'func'
      func: 'empty'
      return: '<special=output_var=>'
    - type: 'for'
      counter: '[0,<var=input=constraints>]'
      func: 'unite'
      return: '<special=output_var=>'
      target: '<special=output_var=>'
      func_params:
          - '<var=new=isl::set>'
    - type: 'func'
      func: 'dump'
      target: '<special=output_var=>'
    - type: 'func'
      func: 'convex_hull'
      target: '<special=output_var=>'
      return: '<special=output_var=>'
    - type: 'func'
      func: 'dump'
      target: '<special=output_var=>'
    - type: 'func'
      func: 'printStats'
      func_params:
          - '<special=output_var=>'

#    - isl::set < isl::point
#    - [isl::set].union
#    - isl::set.convex_hull
#    - [optional project]

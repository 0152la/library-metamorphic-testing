# %n, where n is an integer = input set
# %e = empty set
# %u = universe
# %m = metamorphic test variable
#
# formula names taken from
# https://www.allaboutcircuits.com/technical-articles/boolean-identities/
---
input_count: 3
meta_var_type: "Eigen::Matrix3i"
meta_test_count: 5
variant_count: 20
meta_check:
    - "assert(%m.operator==(%m0))"

generators:
    zero:
        identifier: 'Z'
        relations:
            - "%1.operator-(%1)"
            - "%1.operator*(%Z)"
            - "%Z.operator*(%1)"
    identity:
        identifier: 'I'
        relations:
            - "getIdentity()"
relations:
    identity_idempotent_absorption:
        - "%m=%1.operator+(%Z)"
        - "%m=%Z.operator+(%1)"
        - "%m=%1.operator-(%Z)"
        - "%m=%Z.operator-(%1).operator*(getMinusOne())"
        - "%m=%1.operator*(%I)"
        - "%m=%I.operator*(%1)"
        - "%m=%I.transpose().eval().operator*(%1)"
        - "%m=%I.adjoint().eval().operator*(%1)"
        - "%m=%1.transpose().eval().transpose().eval()"

    addition_commut:
        - "%m=%1.operator+(%2)"
        - "%m=%2.operator+(%1)"

    addition:
        - "%m=%1.operator+(%2)"

    substraction:
        - "%m=%1.operator-(%2)"
        - "%m=%1.operator+(%2.operator*(getMinusOne()))"

    multiplication:
        - "%m=%1.operator*(%2)"
        
    multiplication_assoc:
        - "%m=%1.operator*(%2).operator*(%3)"
        - "%m=%1.operator*(%2.operator*(%3))"

    distrib_mul_add:
        - "%m=%1.operator*(%2.operator+(%3))"
        - "%m=%1.operator*(%2).operator+(%1.operator*(%3))"

    transpose:
        - "%m=%1.transpose().eval()"
   
    transpose-add:
        - "%m=%1.operator+(%2).transpose().eval()"
        - "%m=%1.transpose().eval().operator+(%2.transpose().eval())"

    transpose-scalar:
        - "%m=%1.operator*(getMinusOne()).transpose().eval()"
        - "%m=%1.transpose().eval().operator*(getMinusOne())"

    transpose-mul:
        - "%m=%1.operator*(%2).transpose().eval()"
        - "%m=%2.transpose().eval().operator*(%1.transpose().eval())"

##    inverse:
##        - "%m=Inverse(%1)"
##
##    inverse_mul:
##        - "%m=Inverse(%1.operator*(%2))"
##        - "%m=Inverse(%2).operator*(Inverse(%1))"
##
    adjoint:
        - "%m=%1.adjoint().eval()"

    adjoint-transpose:
        - "%m=%1.adjoint().eval().transpose().eval()"
        - "%m=%1.transpose().eval().adjoint().eval()"

    adjoint-exp:
        - "%m=%1.operator*(%1).adjoint().eval()"
        - "%m=%1.adjoint().eval().operator*(%1.adjoint().eval())"

    adjoint-ident:
        - "%m=%1.operator*(%1.operator+(%2).adjoint().eval()).operator*(%2)"
        - "%m=%2.operator*(%1.operator+(%2).adjoint().eval()).operator*(%1)"

    adj_mul2:
        - "%m=%1.operator*(%2).adjoint().eval()"
        - "%m=%2.adjoint().eval().operator*(%1.adjoint().eval())"

    adj_mul1:
        - "%m=%1.operator*(%1.adjoint().eval())"
        - "%m=%1.adjoint().eval().operator*(%1)"
##        - "%m=operator*(%1.determinant(), getIdentity())"

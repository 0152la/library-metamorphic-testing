# %n, where n is an integer = input set
# %e = empty set
# %u = universe
# %m = metamorphic test variable
#
# formula names taken from
# https://www.allaboutcircuits.com/technical-articles/boolean-identities/
---
input_count: 3
meta_var_type: "Eigen::MatrixXf"
meta_test_count: 5
variant_count: 20
meta_check:
    - "assert(%m.operator==(%m0))"

generators:
    zero:
        identifier: 'z'
        relations:
            - "%1.operator-(%1)"
            - "%1.operator*(%z)"
            - "%z.operator*(%1)"
    identity:
        identifier: 'i'
        relations:
            - "getIdentity()"
            - "%1.operator*(Inverse(%1))"
            - "Inverse(%1).operator*(%1)"
relations:
    identity_idempotent_absorption:
        - "%m=%1.operator+(%z)"
        - "%m=%1.operator-(%z)"
        - "%m=%1.operator*(%i)"
        - "%m=%i.operator*(%1)"
        - "%m=Inverse(Inverse(%1))"
        - "%m=%1.transpose().eval().transpose().eval()"

    addition_commut:
        - "%m=%1.operator+(%2)"
        - "%m=%2.operator+(%1)"

    addition:
        - "%m=%1.operator+(%2)"

    substraction:
        - "%m=%1.operator-(%2)"
        - "%m=%1.operator+(%2.operator*(getMinusOne()))"

    multiplication:
        - "%m=%1.operator*(%2)"
        
    multiplication_assoc:
        - "%m=%1.operator*(%2).operator*(%3)"
        - "%m=%1.operator*(%2.operator*(%3))"

    distrib_mul_add:
        - "%m=%1.operator*(%2.operator+(%3))"
        - "%m=%1.operator*(%2).operator+(%1.operator*(%3))"

    inverse:
        - "%m=Inverse(%1)"

    transpose:
        - "%m=%1.transpose().eval()"

    inverse_mul:
        - "%m=Inverse(%1.operator*(%2))"
        - "%m=Inverse(%2).operator*(Inverse(%1))"

    adjoint:
        - "%m=%1.adjoint().eval()"

    adj_mul2:
        - "%m=%1.operator*(%2).adjoint().eval()"
        - "%m=%2.adjoint().eval().operator*(%1.adjoint().eval())"

    adj_mul1:
        - "%m=%1.operator*(%1.adjoint().eval())"
        - "%m=%1.adjoint().eval().operator*(%1)"

        

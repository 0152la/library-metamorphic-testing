includes:
    - "Eigen/Dense"
    - "testing/eigen-matrix-helpers.h"

pre_setup:
##    - "typedef Eigen::Matrix<float,Dynamic,Dynamic> Eigen::Matrix3i;"

inputs:
    - name: 'var2'
      descriptor: '<unsigned int=range=[1,10000]>'
    - name: 'size'
      descriptor: '<unsigned int=range=[10,10]>'
    - name: 'depth_max'
      descriptor: '<unsigned int=val=15>'
    - name: 'Dynamic'
      descriptor: '<unsigned int=range=[1,10]>'

types:
    - name: 'Eigen::Matrix3i'

funcs:
    - name: 'operator-'
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'Eigen::Matrix3i'
      param_types: ['Eigen::Matrix3i']
      conditions: []
    - name: 'operator+'
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'Eigen::Matrix3i'
      param_types: ['Eigen::Matrix3i']
      conditions: []
    - name: 'operator=='
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'bool'
      param_types: ['Eigen::Matrix3i']
      conditions: []
    - name: 'operator*'
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'Eigen::Matrix3i'
      param_types: ['Eigen::Matrix3i']
      conditions: []
    - name: 'operator*'
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'Eigen::Matrix3i'
      param_types: ['int']
      conditions: []
    - name: 'operator*'
      return_type: 'Eigen::Matrix3i'
      param_types: ['int', 'Eigen::Matrix3i']
      conditions: []
    - name: 'getIdentity'
      return_type: 'Eigen::Matrix3i'
      param_types: []
      conditions: []	
      special: true
    - name: 'rows'	
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'unsigned int'
      param_types: []
      conditions: []	
    - name: 'cols'	
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'unsigned int'
      param_types: []
      conditions: []	
    - name: 'transpose'	
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'Eigen::Matrix3i'
      param_types: []
      conditions: []	
    - name: 'eval'	
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'Eigen::Matrix3i'
      param_types: []
      conditions: []	
##    - name: 'adjoint'	
##      enclosing_class: 'Eigen::Matrix3i'
##      return_type: 'Eigen::Matrix3i'
##      param_types: []
##      conditions: []	
##    - name: 'inverse'	
##      enclosing_class: 'Eigen::Matrix3i'
##      return_type: 'Eigen::Matrix3i'
##      param_types: []
##      conditions: []	
##    - name: 'Inverse'	
##      return_type: 'Eigen::Matrix3i'
##      param_types: ['Eigen::Matrix3i']
##      conditions: []	
    - name: 'determinant'	
      enclosing_class: 'Eigen::Matrix3i'
      return_type: 'int'
      param_types: []
      conditions: []	
    - name: 'getMinusOne'
      return_type: 'int'
      param_types: []
      conditions: []	
      special: true
    - name: 'getInteger'
      return_type: 'int'
      param_types: ['int']
      conditions: []	
      special: true
    - name: 'assert'
      return_type: 'bool'
      param_types: ['bool']
      conditions: []
      special: true

constructors:
    - name: 'Eigen::Matrix3i::Random'
      return_type: 'Eigen::Matrix3i'
      param_types: []
##      param_types: ['<unsigned int=val=3>', '<unsigned int=val=3>']

set_gen:
    - type: 'for'
      counter: '[0,<var=input=size>)'
      func: 'operator*'
#      target: '<special=output_var=>'
      return: '<special=output_var=>'
      func_params:
        - '<special=output_var=>'
    - type: 'for'
      counter: '[0,<var=input=size>)'
      func: 'operator+'
      return: '<special=output_var=>'
      func_params:
        - '<special=output_var=>'
##    - type: 'func'
##      func: 'Inverse'
##      return: '<special=output_var=>'
##      func_params:
##        - '<special=output_var=>'
    - type: 'func'
      func: 'operator-'
      return: '<special=output_var=>'
      func_params:
        - '<special=output_var=>'

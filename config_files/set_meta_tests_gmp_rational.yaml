---
input_count: 3
meta_var_type: "mpq_class"
variant_count: 20
meta_check:
    - "assert(operator==(%m0,%m))"

generators:
    zero:
        identifier: 'z'
        relations:
            - "operator-(%1,%1)"
            - "operator*(%1,%z)"
    one:
        identifier: 'o'
        relations:
            - "get_one(%1)"
    minu_one:
        identifier: 'n'
        relations:
            - "get_minus_one(%1)"

relations:
    identity:
        - "%m=operator+(%1,%z)" 
        - "%m=operator-(%1,%z)" 
        - "%m=operator*(%1,%o)" 
        - "%m=mpq_class_w(%1.get_num(),%1.get_den())"

    addition_commut:
        - "%m=operator+(%1,%2)"
        - "%m=operator+(%2,%1)"
     
    multiplication_commut:
        - "%m=operator*(%1,%2)"
        - "%m=operator*(%2,%1)"

    multiplication:
        - "%m=operator*(%1,%2)"
        - "%m=mpq_class_w(operator*(%1.get_num(),%2.get_num()),operator*(%1.get_den(),%2.get_den()))"

    addition:
        - "%m=operator+(%1, %2)"
        - "%m=mpq_class_w(operator+(operator*(%1.get_num(),%2.get_den()),operator*(%1.get_den(),%2.get_num())),operator*(%1.get_den(),%2.get_den()))"

    substraction:
        - "%m=operator-(%1, %2)"
        - "%m=mpq_class_w(operator-(operator*(%1.get_num(),%2.get_den()),operator*(%1.get_den(),%2.get_num())),operator*(%1.get_den(),%2.get_den()))"

    inverse:
        - "%m=operator-(%z, %1)"
        - "%m=mpq_class_w(operator-(get_zero_int(), %1.get_num()), %1.get_den())"
        - "%m=mpq_class_w(%1.get_num(),operator-(get_zero_int(), %1.get_den()))"
        
    multiplication_assoc:
        - "%m=operator*(operator*(%1,%2),%3)"
        - "%m=operator*(%1,operator*(%2,%3))"

    distrib_mul_add:
        - "%m=operator*(%1, operator+(%2,%3))"
        - "%m=operator+(operator*(%1, %2), operator*(%1,%3))"

    abs:
        - "%m=abs(%1)"
        - "%m=abs(operator*(%1, %n))"





